# 前记 

突发奇想想写点什么来记录自己的学习记录



# 2021.8.26

之前一直在学习爬虫，作为小技能办事，也能理解计算机网络相关知识

根据相关教程学习：learn_python3_spider-master

今天学到15章，根据15章的知识改写第14章自己写的单线程爬虫



### 第15章

使用了python的multiprocessing模块

常用模块：process，quque



参考学习链接：

Python 多进程和进程池 :https://www.cnblogs.com/tashanzhishi/p/10775657.html

爬虫教程：https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjg2Nw==&mid=2247489911&idx=1&sn=4be0334539d603f6fd6475bb51557221&source=41#wechat_redirect

Pool类：https://blog.csdn.net/liuxingen/article/details/72605343



测试后发现：

1.异步调用，高并发，服务器返回429，考虑改为同步并考虑请求频率

2.同步不知道是不是串行阻塞的原因，其结果与单线程无异（疑惑

调整如下：

1.在收到429后，休眠几秒，返回递归结果，若超时，pass

2.仍为异步，但每次调用后，休眠几秒，缓解服务器其几秒，虽然仍限制了效率，但可行



### 第16章

略


### 第17章

代理池：https://cuiqingcai.com/7048.html

没使用代理池因为抓取的ip代理可能存在隐私泄露风险（个人理解




### 第18章

需要登录的：抓包获得Cookie（如果不是动态的话



### 第19章

图片验证码：教程使用orc处理图片并识别，个人认为使用opencv处理图片后使用orc识别会好很多



### 第20章

滑块验证：

1.计算滑块距离

2.处理滑块速度使得滑块行为像人类

3.使用selenium滑块



# 2021.8.30

重学数据结构，以java作为主要语言


# 2021.9.7
尝试用爬虫登录学校教务处

发现有加密post

主要参数有：
```
{
"rsa"：通过strEnc函数加密,
"ul":账号和密码的个数,,
"pl"：账号和密码的个数,
"execution"：直接看网页源码能获得其值，
"lt"：直接看网页源码能获得其值,
"_eventid":固定值为"submit"
}
```
以及Cookie

所以如何找到rsa和Cookie的值是关键
通过打断点发现发起者是
http://cas.shnu.edu.cn/cas/comm/js/login10.js

相关函数为：
```
function login(){
	
	var $u = $("#un") , $p=$("#pd");
	var u = $u.val().trim();
	if(u==""){
		$u.focus();
		$u.parent().addClass("login_error_border");
		return ;
	}
	
	var p = $p.val().trim();
	if(p==""){
		$p.focus();
		$p.parent().addClass("login_error_border");
		return ;
	}
	
	$u.attr("disabled","disabled");
	$p.attr("disabled","disabled");
	
	//防止记录错误密码，每次要刷新记住的密码
	if($("#rememberName").is(":checked")){
		//不等于空，写cookie
		setCookie('neusoft_cas_un' , u , 7);
		setCookie('neusoft_cas_pd' , strEnc(p,'neusoft','cas','pd') , 7);
	}
	
	var lt = $("#lt").val();
	
	$("#ul").val(u.length);
	$("#pl").val(p.length);
	$("#rsa").val(strEnc(u+p+lt , '1' , '2' , '3'));
	$("#loginForm")[0].submit();
	
}
```

```
//设置cookie
function setCookie(cname, cvalue, exdays) {
  var d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  var expires = "expires="+d.toUTCString();
  document.cookie = cname + "=" + cvalue + "; " + expires;
}
```

通过去全局搜索发现strEnc()在http://cas.shnu.edu.cn/cas/comm/js/des.js
函数为：
```
function strEnc(data, firstKey, secondKey, thirdKey) {

    var leng = data.length;
    var encData = "";
    var firstKeyBt, secondKeyBt, thirdKeyBt, firstLength, secondLength, thirdLength;
    if (firstKey != null && firstKey != "") {
        firstKeyBt = getKeyBytes(firstKey);
        firstLength = firstKeyBt.length;
    }
    if (secondKey != null && secondKey != "") {
        secondKeyBt = getKeyBytes(secondKey);
        secondLength = secondKeyBt.length;
    }
    if (thirdKey != null && thirdKey != "") {
        thirdKeyBt = getKeyBytes(thirdKey);
        thirdLength = thirdKeyBt.length;
    }

    if (leng > 0) {
        if (leng < 4) {
            var bt = strToBt(data);
            var encByte;
            if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                var tempBt;
                var x, y, z;
                tempBt = bt;
                for (x = 0; x < firstLength; x++) {
                    tempBt = enc(tempBt, firstKeyBt[x]);
                }
                for (y = 0; y < secondLength; y++) {
                    tempBt = enc(tempBt, secondKeyBt[y]);
                }
                for (z = 0; z < thirdLength; z++) {
                    tempBt = enc(tempBt, thirdKeyBt[z]);
                }
                encByte = tempBt;
            } else {
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                    var tempBt;
                    var x, y;
                    tempBt = bt;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "") {
                        var tempBt;
                        var x = 0;
                        tempBt = bt;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        encByte = tempBt;
                    }
                }
            }
            encData = bt64ToHex(encByte);
        } else {
            var iterator = parseInt(leng / 4);
            var remainder = leng % 4;
            var i = 0;
            for (i = 0; i < iterator; i++) {
                var tempData = data.substring(i * 4 + 0, i * 4 + 4);
                var tempByte = strToBt(tempData);
                var encByte;
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                    var tempBt;
                    var x, y, z;
                    tempBt = tempByte;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    for (z = 0; z < thirdLength; z++) {
                        tempBt = enc(tempBt, thirdKeyBt[z]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                        var tempBt;
                        var x, y;
                        tempBt = tempByte;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        for (y = 0; y < secondLength; y++) {
                            tempBt = enc(tempBt, secondKeyBt[y]);
                        }
                        encByte = tempBt;
                    } else {
                        if (firstKey != null && firstKey != "") {
                            var tempBt;
                            var x;
                            tempBt = tempByte;
                            for (x = 0; x < firstLength; x++) {
                                tempBt = enc(tempBt, firstKeyBt[x]);
                            }
                            encByte = tempBt;
                        }
                    }
                }
                encData += bt64ToHex(encByte);
            }
            if (remainder > 0) {
                var remainderData = data.substring(iterator * 4 + 0, leng);
                var tempByte = strToBt(remainderData);
                var encByte;
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                    var tempBt;
                    var x, y, z;
                    tempBt = tempByte;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    for (z = 0; z < thirdLength; z++) {
                        tempBt = enc(tempBt, thirdKeyBt[z]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                        var tempBt;
                        var x, y;
                        tempBt = tempByte;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        for (y = 0; y < secondLength; y++) {
                            tempBt = enc(tempBt, secondKeyBt[y]);
                        }
                        encByte = tempBt;
                    } else {
                        if (firstKey != null && firstKey != "") {
                            var tempBt;
                            var x;
                            tempBt = tempByte;
                            for (x = 0; x < firstLength; x++) {
                                tempBt = enc(tempBt, firstKeyBt[x]);
                            }
                            encByte = tempBt;
                        }
                    }
                }
                encData += bt64ToHex(encByte);
            }
        }
    }
    return encData;
}
```

但是 https://zhuanlan.zhihu.com/p/58554106 给了一个很好的思路，虽然自定义函数很多，但是可以直接使用js文件，省了很多心

相关库：PyExecJS

最后在抓包中发现需重定向三次，最后请求主页面

其中后两位分别需要额外参数：jessionid和ticket

但在写脚本的过程中发现，关于ticket的参数可有可无，并不清楚为什么


而，jessionid是必须的

关于jeesionid的描述：https://blog.csdn.net/Q176782/article/details/52267507?utm_source=itdadao&utm_medium=referral

所以
整体思路为：

1.在第一次请求时获得相关加密参数和jessionid

2.提交表单，同时在请求请求头中加入cookie（与jessionid相关）

3.请求重定向，请求主页面

PS:在3这个过程中，我不清楚是不是要请求重定向，但是在抓包的过程中，浏览器是这么做的，所以我照写了


学校的网站不允许过快点击，即多进程爬虫高并发可行性不大？


以及，由于学校抢课使用虚拟币投币制，所以此脚本作用不大？


但是仍能为量化评价打下基础

脚本相关文件夹：[SHNU](SHNU)




# 2021.9.12


## VSCode CPU占用率高
今天发现VScode CPU占有率特别高，通过搜索可以用

https://github.com/Microsoft/vscode/wiki/Performance-Issues#consuming-cpu

中提供的方法去检查，最后暂时关闭了全部插件，仅开启了要用的插件暂时解决了cpu占用高的问题，在以后开启其他时可以排查


## 纠察之前SeqList.java的错误

之前写的代码（部分）为：
```
    //获得第i位置的元素
    public Objetc getElem(int i)
    {
        if(i<0||i>=this.length)
        {
            log.warning("查询位置异常");
            return null;
        }
        else
        {
            log.info("\n"+"类型:"+list[i].getClass()+"\n"+"值:"+list[i].toString());
            return list[i];
        }
   }
```
例如这样的方法，事实上返回值也是Object对象，虽然测试好像没有影响，但是根据《Head First Java 第二版》的说法，存入例如Integer类的数据，取出来的却是Object类，解决方法为，返回值强行转化为T类:

```
    //获得第i位置的元素
    public T getElem(int i)
    {
        if(i<0||i>=this.length)
        {
            log.warning("查询位置异常");
            return null;
        }
        else
        {
            log.info("\n"+"类型:"+list[i].getClass()+"\n"+"值:"+list[i].toString());
            return (T)list[i];
        }
    }
```
    
但是会提示警告："Type safety: Unchecked cast from Object to T"，暂时不清楚解决方法


**注：在之后2021.9.13中发现原先没有错误，返回类型是正确的**

**因为之前对于书《Head First Java 第二版》里P215里ArryList<Object>就意味着他将引用变量的类型固定为Object**
	
**而我的代码插入的时候是将对象插入Object数组里，自然不会有问题**
	
	



# 2021.9.13

## 关于Object&&泛型&&通配符问题
一直对到底是Object类、<T>还是<?>有疑惑，在这里找到了解答：

https://www.renfei.net/posts/1003341


## 尝试实现了能存放任何类型的栈的思路：

[LinkedStack.java](Code/Stack/LinkedStack.java)

主要是Object类型的多态以及自动拆装包的机制



# 2021.9.14

## 对比字符串
在C家族里字符串是以'\0'作为结束字符，而在Java中字符串是String类的对象，所以不是以'\0'作为结束的标志



# 2021.9.26

## smtp
学习到计算机网络的smtp  尝试使用smtp 登录学校邮件服务器 发送邮件

相关连接：

https://jingyan.baidu.com/article/72ee561a99ea0ba06038df7d.html
https://blog.csdn.net/weixin_38264524/article/details/71024433

前提 ：  打开win10系统中的 smtp 服务

结果：成功发送 如下图所示
![](Pic/smtp.jpg)

POP3的结果如下
![](Pic/pop3.jpg)


# 2021.10.4

## 翻墙

如何翻墙？
通过国外服务器和v2ray实现

参考链接：

http://www.ubuntu520.com/v2ray-vps-vultr-https-tls.html

https://www.sky350.com/374.html


### 现在做法（2021.12.4）

连接服务器后输入

连接配置服务器v2ray服务端

输入``bash <(curl -Ls https://raw.githubusercontent.com/luciferkids/hijkpw-scripts/main/ubuntu_install_v2ray.sh)``安装一键脚本

选择端口

按配置填写v2ray客户端，代理即可



### 废案

具体做法参考：

1.购买国外服务器（推荐美国服务器，其他的反而卡），我用的是vulter，选择云服务器最便宜的就行，美国有些州有$2.5/month的选择，系统选择的是ubuntu 系统20.10 x64//最高系统似乎执行不了下面的指令

2.使用putty远程连接服务器//注：在输入登录密码的时候不显示密码的，并不是卡，另外黏贴不是ctrl+v而是鼠标右键

3.按照第一条参考连接配置服务器v2ray服务端

- 具体指令有：
  - 1.v2ray一键脚本安装：``bash <(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/goV2.sh)``

  - 2.开放端口：``ufw allow 1234/tcp //这里的1234改成你的端口``

  - 3.开启v2ray:

    - ``systemctl enable v2ray``

    - ``systemctl start v2ray``

4.使用v2rayN客户端

- 具体操作：

  - 1.添加Vmess服务器，配置好信息//若不记得端口、id等可以在服务器上输入:``cat /etc/v2ray/config.json``来查看

  - 2.将刚刚的服务器设置为活动服务器

  - 3.在任务栏图标右键打开系统代理选项，选择自动配置系统代理，即可完成代理进行翻墙//我的自动配置配置在了chrome游览器上

  - 4.注：如果没有路由这个选项，可以在界面打开设置-高级设置中找到，但实测下来无论是全局还是绕过大陆都能翻墙


# 2021.10.8

## UDP服务器与客户端

[服务器代码](Code/UDP/UDPServer.py)

[客户端代码](Code/UDP/UDPClient.py)


效果图：

![](Pic/UDP.jpg)

总结：

1.关于服务器运行python脚本：ubuntu20.10 x64自带python3   若脚本在根目录下(root/)，则运行``python3 xxx.py``就能运行

2.关于客户端A发送后服务器和客户端B接收不到的猜想：

	- 1.主要可能：云服务器处理速度慢，多线程数少，导致处理不过来以至丢包

	- 2.程序还是写的有问题hhhh

3.关于中文的发送：在解码和编码时使用GB2312编码即可

4.换成TCP可能稳定性会好点


# 2021.10.17

## 双系统 ---- 安装ubuntu

具体教程可以参考b站保姆级视频：

https://www.bilibili.com/video/BV1554y1n7zv?from=search&seid=9269282891209665392&spm_id_from=333.337.0.0

十分详细和具体


## arp欺骗

在安装完ubuntu后下载了wireshark和ettercap尝试中间人攻击

实验发现ettercap进行网关和受害者的双向欺骗并不成功，在同样的配置下使用arpspoof却成功了，但仍抓了个寂寞

但是，如果arp欺骗，那么使用arpspoof是成功的，在关闭路由转发后，使受害者发不出去/接收不到包导致断网

```
语法arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host
参数-i interface 指定要使用的接口。
-c own|host|both 指定范围own|host|both(自己|主机|两者)
-t target 指定一台特定主机进行ARP中毒(如果未指定，则为LAN上的所有主机)
-r 毒害两个主机(主机和目标)以捕获两个方向的流量。(仅对-t有效)
host 指定您希望拦截数据包的host(通常是本地网关)
示例 arpspoof -i eth0 -t 192.168.1.100 192.168.1.1 
//eth0为攻击者使用的网卡 192.168.1.100为攻击目标的IP  192.168.1.1为攻击目标的网关
```

注：测试完后记得关闭转发，不然会发生整个网段dns数据大量冗余，导致整个网络无法上网。

解决办法：

1.对于帮助受害者：清理arp缓存表：

使用ctrl+c 停止攻击，在停止攻击后，arpspoof会继续发送正确的mac地址，耗时10s左右

2.作为受害者：

设置ARP缓存表为静态，但不推荐。因为在一个大型的网络中，它要花费很长的时间手动设置，这是不可能的。

由于还没学到链路层知识，这些只能说是个人经验




# 2021.11.9

## 混合开发----flutter初试

不建议使用Android Studio，我的电脑太卡了使用起来，个人使用的是VSCODE配置环境，具体网上都有教程。

## 关于真机/虚拟机的选择

尝试了一下午AS自带的AVD虚拟机没成功，最后使用的是真机和vscode的组合，算是放弃了使用AS。

//明天会尝试使用tc或者网易等虚拟机

## 关于Gradle太慢的问题

在网上能得到答案（改用国内镜像源）



# 2021.11.29

补记

## 上师大的量化评价脚本（使用代理和自动化技术）

[量化评教脚本](SHNU/selenium)

有带gui和不带的版本，在实际测试时，对一节课多老师的评价有bug，因为自身没有这种课程（解决方法：在运行一次即可）

### 遗传算法玩具

[genetic_drawing](https://github.com/anopara/genetic-drawing)



# 2021.12.4

## 解决不能翻墙问题

最近总是翻不了墙，一开始因为是端口被墙了，排查一圈发现是安装v2ray一键脚本的源的作者被请请喝茶了，换了个源就好了，具体的已在之前的翻墙说明中更新

## 使用STM32F407 EXPLORER 实现一个小型网站的范例的保姆级教程

相关连接:[WebServer](WebServer/)
