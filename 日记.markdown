# 前记 

突发奇想想写点什么来记录自己的学习记录



## 2021.8.26

之前一直在学习爬虫，作为小技能办事，也能理解计算机网络相关知识

根据相关教程学习：learn_python3_spider-master

今天学到15章，根据15章的知识改写第14章自己写的单线程爬虫



#### 第15章

使用了python的multiprocessing模块

常用模块：process，quque



参考学习链接：

Python 多进程和进程池 :https://www.cnblogs.com/tashanzhishi/p/10775657.html

爬虫教程：https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjg2Nw==&mid=2247489911&idx=1&sn=4be0334539d603f6fd6475bb51557221&source=41#wechat_redirect

Pool类：https://blog.csdn.net/liuxingen/article/details/72605343



测试后发现：

1.异步调用，高并发，服务器返回429，考虑改为同步并考虑请求频率

2.同步不知道是不是串行阻塞的原因，其结果与单线程无异（疑惑

调整如下：

1.在收到429后，休眠几秒，返回递归结果，若超时，pass

2.仍为异步，但每次调用后，休眠几秒，缓解服务器其几秒，虽然仍限制了效率，但可行



#### 第16章

略



#### 第17章

代理池：https://cuiqingcai.com/7048.html

没使用代理池因为抓取的ip代理可能存在隐私泄露风险（个人理解




#### 第18章

需要登录的：抓包获得Cookie（如果不是动态的话



#### 第19章

图片验证码：教程使用orc处理图片并识别，个人认为使用opencv处理图片后使用orc识别会好很多



#### 第20章

滑块验证：

1.计算滑块距离

2.处理滑块速度使得滑块行为像人类

3.使用selenium滑块



## 2021.8.30

重学数据结构，以java作为主要语言


## 2021.9.7
尝试用爬虫登录学校教务处

发现有加密post

主要参数有：
```
{
"rsa"：通过strEnc函数加密,
"ul":账号和密码的个数,,
"pl"：账号和密码的个数,
"execution"：直接看网页源码能获得其值，
"lt"：直接看网页源码能获得其值,
"_eventid":固定值为"submit"
}
```
以及Cookie

所以如何找到rsa和Cookie的值是关键
通过打断点发现发起者是
http://cas.shnu.edu.cn/cas/comm/js/login10.js

相关函数为：
```
function login(){
	
	var $u = $("#un") , $p=$("#pd");
	var u = $u.val().trim();
	if(u==""){
		$u.focus();
		$u.parent().addClass("login_error_border");
		return ;
	}
	
	var p = $p.val().trim();
	if(p==""){
		$p.focus();
		$p.parent().addClass("login_error_border");
		return ;
	}
	
	$u.attr("disabled","disabled");
	$p.attr("disabled","disabled");
	
	//防止记录错误密码，每次要刷新记住的密码
	if($("#rememberName").is(":checked")){
		//不等于空，写cookie
		setCookie('neusoft_cas_un' , u , 7);
		setCookie('neusoft_cas_pd' , strEnc(p,'neusoft','cas','pd') , 7);
	}
	
	var lt = $("#lt").val();
	
	$("#ul").val(u.length);
	$("#pl").val(p.length);
	$("#rsa").val(strEnc(u+p+lt , '1' , '2' , '3'));
	$("#loginForm")[0].submit();
	
}
```

```
//设置cookie
function setCookie(cname, cvalue, exdays) {
  var d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  var expires = "expires="+d.toUTCString();
  document.cookie = cname + "=" + cvalue + "; " + expires;
}
```

通过去全局搜索发现strEnc()在http://cas.shnu.edu.cn/cas/comm/js/des.js
函数为：
```
function strEnc(data, firstKey, secondKey, thirdKey) {

    var leng = data.length;
    var encData = "";
    var firstKeyBt, secondKeyBt, thirdKeyBt, firstLength, secondLength, thirdLength;
    if (firstKey != null && firstKey != "") {
        firstKeyBt = getKeyBytes(firstKey);
        firstLength = firstKeyBt.length;
    }
    if (secondKey != null && secondKey != "") {
        secondKeyBt = getKeyBytes(secondKey);
        secondLength = secondKeyBt.length;
    }
    if (thirdKey != null && thirdKey != "") {
        thirdKeyBt = getKeyBytes(thirdKey);
        thirdLength = thirdKeyBt.length;
    }

    if (leng > 0) {
        if (leng < 4) {
            var bt = strToBt(data);
            var encByte;
            if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                var tempBt;
                var x, y, z;
                tempBt = bt;
                for (x = 0; x < firstLength; x++) {
                    tempBt = enc(tempBt, firstKeyBt[x]);
                }
                for (y = 0; y < secondLength; y++) {
                    tempBt = enc(tempBt, secondKeyBt[y]);
                }
                for (z = 0; z < thirdLength; z++) {
                    tempBt = enc(tempBt, thirdKeyBt[z]);
                }
                encByte = tempBt;
            } else {
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                    var tempBt;
                    var x, y;
                    tempBt = bt;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "") {
                        var tempBt;
                        var x = 0;
                        tempBt = bt;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        encByte = tempBt;
                    }
                }
            }
            encData = bt64ToHex(encByte);
        } else {
            var iterator = parseInt(leng / 4);
            var remainder = leng % 4;
            var i = 0;
            for (i = 0; i < iterator; i++) {
                var tempData = data.substring(i * 4 + 0, i * 4 + 4);
                var tempByte = strToBt(tempData);
                var encByte;
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                    var tempBt;
                    var x, y, z;
                    tempBt = tempByte;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    for (z = 0; z < thirdLength; z++) {
                        tempBt = enc(tempBt, thirdKeyBt[z]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                        var tempBt;
                        var x, y;
                        tempBt = tempByte;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        for (y = 0; y < secondLength; y++) {
                            tempBt = enc(tempBt, secondKeyBt[y]);
                        }
                        encByte = tempBt;
                    } else {
                        if (firstKey != null && firstKey != "") {
                            var tempBt;
                            var x;
                            tempBt = tempByte;
                            for (x = 0; x < firstLength; x++) {
                                tempBt = enc(tempBt, firstKeyBt[x]);
                            }
                            encByte = tempBt;
                        }
                    }
                }
                encData += bt64ToHex(encByte);
            }
            if (remainder > 0) {
                var remainderData = data.substring(iterator * 4 + 0, leng);
                var tempByte = strToBt(remainderData);
                var encByte;
                if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "" && thirdKey != null && thirdKey != "") {
                    var tempBt;
                    var x, y, z;
                    tempBt = tempByte;
                    for (x = 0; x < firstLength; x++) {
                        tempBt = enc(tempBt, firstKeyBt[x]);
                    }
                    for (y = 0; y < secondLength; y++) {
                        tempBt = enc(tempBt, secondKeyBt[y]);
                    }
                    for (z = 0; z < thirdLength; z++) {
                        tempBt = enc(tempBt, thirdKeyBt[z]);
                    }
                    encByte = tempBt;
                } else {
                    if (firstKey != null && firstKey != "" && secondKey != null && secondKey != "") {
                        var tempBt;
                        var x, y;
                        tempBt = tempByte;
                        for (x = 0; x < firstLength; x++) {
                            tempBt = enc(tempBt, firstKeyBt[x]);
                        }
                        for (y = 0; y < secondLength; y++) {
                            tempBt = enc(tempBt, secondKeyBt[y]);
                        }
                        encByte = tempBt;
                    } else {
                        if (firstKey != null && firstKey != "") {
                            var tempBt;
                            var x;
                            tempBt = tempByte;
                            for (x = 0; x < firstLength; x++) {
                                tempBt = enc(tempBt, firstKeyBt[x]);
                            }
                            encByte = tempBt;
                        }
                    }
                }
                encData += bt64ToHex(encByte);
            }
        }
    }
    return encData;
}
```

但是 https://zhuanlan.zhihu.com/p/58554106 给了一个很好的思路，虽然自定义函数很多，但是可以直接使用js文件，省了很多心

相关库：PyExecJS

最后在抓包中发现需重定向三次，最后请求主页面

其中后两位分别需要额外参数：jessionid和ticket

但在写脚本的过程中发现，关于ticket的参数可有可无，并不清楚为什么


而，jessionid是必须的

关于jeesionid的描述：https://blog.csdn.net/Q176782/article/details/52267507?utm_source=itdadao&utm_medium=referral

所以
整体思路为：

1.在第一次请求时获得相关加密参数和jessionid

2.提交表单，同时在请求请求头中加入cookie（与jessionid相关）

3.请求重定向，请求主页面

PS:在3这个过程中，我不清楚是不是要请求重定向，但是在抓包的过程中，浏览器是这么做的，所以我照写了


学校的网站不允许过快点击，即多进程爬虫高并发可行性不大？


以及，由于学校抢课使用虚拟币投币制，所以此脚本作用不大？


但是仍能为量化评价打下基础

脚本相关文件夹：[SHNU](SHNU)




## 2021.9.12

今天发现VScode CPU占有率特别高，通过搜索可以用

https://github.com/Microsoft/vscode/wiki/Performance-Issues#consuming-cpu

中提供的方法去检查，最后暂时关闭了全部插件，仅开启了要用的插件暂时解决了cpu占用高的问题，在以后开启其他时可以排查
